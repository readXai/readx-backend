<?php

require_once __DIR__ . '/vendor/autoload.php';

use App\Services\ArabicSyllableService;

echo "üî§ Tests de syllabification - Mots arabes non vocalis√©s\n\n";

// Initialiser le service
$syllableService = new ArabicSyllableService();

// Tests comparatifs : mots vocalis√©s vs non vocalis√©s
$testCases = [
    'Mots simples' => [
        'ŸÉÿ™ÿ®' => 'ŸÉŸéÿ™Ÿéÿ®Ÿé', // il √©crivit
        'ŸÇŸÑŸÖ' => 'ŸÇŸéŸÑŸéŸÖŸå', // stylo
        'ÿ®Ÿäÿ™' => 'ÿ®ŸéŸäŸíÿ™Ÿå', // maison
        'ŸàŸÑÿØ' => 'ŸàŸéŸÑŸéÿØŸå', // gar√ßon
    ],
    'Mots avec voyelles longues' => [
        'ŸÉÿ™ÿßÿ®' => 'ŸÉŸêÿ™Ÿéÿßÿ®Ÿå', // livre
        'ÿ∑ÿßŸÑÿ®' => 'ÿ∑ŸéÿßŸÑŸêÿ®Ÿå', // √©l√®ve
        'ÿ¨ŸÖŸäŸÑ' => 'ÿ¨ŸéŸÖŸêŸäŸÑŸå', // beau
    ],
    'Mots complexes' => [
        'ŸÖÿØÿ±ÿ≥ÿ©' => 'ŸÖŸéÿØŸíÿ±Ÿéÿ≥Ÿéÿ©Ÿå', // √©cole
        'ŸÖÿ≥ÿ™ŸÇÿ®ŸÑ' => 'ŸÖŸèÿ≥Ÿíÿ™ŸéŸÇŸíÿ®ŸéŸÑŸå', // avenir
        'ŸÖŸÉÿ™ÿ®ÿ©' => 'ŸÖŸéŸÉŸíÿ™Ÿéÿ®Ÿéÿ©Ÿå', // biblioth√®que
    ]
];

foreach ($testCases as $category => $words) {
    echo "üìö Cat√©gorie: $category\n";
    echo str_repeat('=', 60) . "\n";
    
    foreach ($words as $unvocalized => $vocalized) {
        echo "üîç Test: $unvocalized (non vocalis√©) vs $vocalized (vocalis√©)\n";
        
        // Test du mot non vocalis√©
        echo "   üìù Non vocalis√© ($unvocalized):\n";
        try {
            $resultUnvocalized = $syllableService->generateSyllables($unvocalized);
            
            echo "      Syllabes: [";
            foreach ($resultUnvocalized as $i => $syllable) {
                echo $syllable['syllable_text'];
                if ($i < count($resultUnvocalized) - 1) echo ', ';
            }
            echo "]\n";
            
            echo "      Types: [";
            foreach ($resultUnvocalized as $i => $syllable) {
                echo $syllable['syllable_type'];
                if ($i < count($resultUnvocalized) - 1) echo ', ';
            }
            echo "]\n";
            
            // Afficher les suggestions si disponibles
            echo "      Suggestions: [";
            foreach ($resultUnvocalized as $i => $syllable) {
                if (isset($syllable['suggestion'])) {
                    echo $syllable['suggestion'];
                } else {
                    echo $syllable['syllable_text'];
                }
                if ($i < count($resultUnvocalized) - 1) echo ', ';
            }
            echo "]\n";
            
            // V√©rifier si c'est inf√©r√©
            $isInferred = isset($resultUnvocalized[0]['is_inferred']) && $resultUnvocalized[0]['is_inferred'];
            echo "      Statut: " . ($isInferred ? "ü§ñ Inf√©r√© automatiquement" : "‚úÖ Vocalis√©") . "\n";
            
        } catch (Exception $e) {
            echo "      ‚ùå ERREUR: " . $e->getMessage() . "\n";
        }
        
        // Test du mot vocalis√© pour comparaison
        echo "   ‚úÖ Vocalis√© ($vocalized):\n";
        try {
            $resultVocalized = $syllableService->generateSyllables($vocalized);
            
            echo "      Syllabes: [";
            foreach ($resultVocalized as $i => $syllable) {
                echo $syllable['syllable_text'];
                if ($i < count($resultVocalized) - 1) echo ', ';
            }
            echo "]\n";
            
            echo "      Types: [";
            foreach ($resultVocalized as $i => $syllable) {
                echo $syllable['syllable_type'];
                if ($i < count($resultVocalized) - 1) echo ', ';
            }
            echo "]\n";
            
            $isInferred = isset($resultVocalized[0]['is_inferred']) && $resultVocalized[0]['is_inferred'];
            echo "      Statut: " . ($isInferred ? "ü§ñ Inf√©r√© automatiquement" : "‚úÖ Vocalis√©") . "\n";
            
        } catch (Exception $e) {
            echo "      ‚ùå ERREUR: " . $e->getMessage() . "\n";
        }
        
        echo "\n";
    }
    
    echo "\n";
}

// Tests de cas sp√©ciaux
echo "üéØ CAS SP√âCIAUX - MOTS NON VOCALIS√âS\n";
echo str_repeat('=', 60) . "\n";

$specialCases = [
    'Mots avec Chadda' => [
        'ŸÖÿπŸÑŸÖ' => 'Enseignant (ŸÖŸèÿπŸéŸÑŸêŸëŸÖŸå)',
        'ŸÖÿØÿ±ÿ≥' => 'Professeur (ŸÖŸèÿØŸéÿ±ŸêŸëÿ≥Ÿå)',
        'ŸÖÿ≠ŸÖÿØ' => 'Mohammed (ŸÖŸèÿ≠ŸéŸÖŸéŸëÿØŸå)'
    ],
    'Mots avec article' => [
        'ÿßŸÑŸÉÿ™ÿßÿ®' => 'Le livre (ÿßŸÑŸíŸÉŸêÿ™Ÿéÿßÿ®Ÿè)',
        'ÿßŸÑŸÖÿØÿ±ÿ≥ÿ©' => 'L\'√©cole (ÿßŸÑŸíŸÖŸéÿØŸíÿ±Ÿéÿ≥Ÿéÿ©Ÿè)',
        'ÿßŸÑÿ∑ÿßŸÑÿ®' => 'L\'√©l√®ve (ÿßŸÑÿ∑ŸéŸëÿßŸÑŸêÿ®Ÿè)'
    ],
    'Mots tr√®s courts' => [
        'ŸÖŸÜ' => 'De/Qui (ŸÖŸêŸÜŸí)',
        'ŸÅŸä' => 'Dans (ŸÅŸêŸä)',
        'ÿ•ŸÑŸâ' => 'Vers (ÿ•ŸêŸÑŸéŸâ)'
    ]
];

foreach ($specialCases as $category => $words) {
    echo "üìö $category:\n";
    
    foreach ($words as $word => $meaning) {
        echo "   üîç $word ($meaning):\n";
        
        try {
            $result = $syllableService->generateSyllables($word);
            
            echo "      Syllabes: [";
            foreach ($result as $i => $syllable) {
                echo $syllable['syllable_text'];
                if ($i < count($result) - 1) echo ', ';
            }
            echo "]\n";
            
            if (isset($result[0]['suggestion'])) {
                echo "      Suggestions: [";
                foreach ($result as $i => $syllable) {
                    echo $syllable['suggestion'] ?? $syllable['syllable_text'];
                    if ($i < count($result) - 1) echo ', ';
                }
                echo "]\n";
            }
            
        } catch (Exception $e) {
            echo "      ‚ùå ERREUR: " . $e->getMessage() . "\n";
        }
        
        echo "\n";
    }
}

// Recommandations p√©dagogiques
echo "üéì RECOMMANDATIONS P√âDAGOGIQUES\n";
echo str_repeat('=', 60) . "\n";
echo "1. ü§ñ Les mots non vocalis√©s sont automatiquement d√©tect√©s\n";
echo "2. üìù Des suggestions de vocalisation sont propos√©es (Fatha par d√©faut)\n";
echo "3. ‚ö†Ô∏è  L'enseignant peut corriger les suggestions selon le contexte\n";
echo "4. üéØ Les √©l√®ves sont encourag√©s √† ajouter les voyelles courtes\n";
echo "5. üìä Le syst√®me distingue les syllabes inf√©r√©es des syllabes vocalis√©es\n\n";

echo "‚úÖ Tests des mots non vocalis√©s termin√©s!\n";
